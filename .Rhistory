filter(cran, package== "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5, NA, 10))
!is.na(c(3,5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, dec(ip_id))
arrange(cran2, desc(ip_id))
arrance(cran2, package, ip_id)
arrange(cran2, package, ip_id)
arrange(cran, country, desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size /2^20)
mutate(cran3, size_mb = size /2^20, size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "0a06680d7965d5ef1324",
secret = "ce3b7863f49b6aae387dbc42ddb1c817ee76633d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
rm(ls())
rm(list = ls())
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "0a06680d7965d5ef1324",
secret = "ce3b7863f49b6aae387dbc42ddb1c817ee76633d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
install.packages("httpuv")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "0a06680d7965d5ef1324",
secret = "ce3b7863f49b6aae387dbc42ddb1c817ee76633d")
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(httpuv)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
rm(list = ls())
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
rm(list = ls())
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", "0a06680d7965d5ef1324", "ce3b7863f49b6aae387dbc42ddb1c817ee76633d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
rm(list = ls())
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("TestingOAuth",
key = "0a06680d7965d5ef1324",
secret = "ce3b7863f49b6aae387dbc42ddb1c817ee76633d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req[1]
req[2]
req[3]
req[4]
gtoken
myapp
names(gtoken)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("TestingOAuth",
key = "0a06680d7965d5ef1324",
secret = "ce3b7863f49b6aae387dbc42ddb1c817ee76633d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
browse(req)
library(jsonlite)
names(req)
names(req$url)
names(req$date)
names(req$content)
req[req$date]
json1 <- content(req)
json2 <- jsonlite::fromJSON(toJSON(json1))
View(json2)
View(json2)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csb, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cram <- tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
View(cram)
View(cram)
View(cram)
filter(cran, r_version <= "3.0.2", country == "N")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country== "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5, NA, 10))
!is.na(c(3,5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, coutnry, desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantle(pack_sum$count, probs = 0.99)
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(student2, sex_class, count, -grade)
gather(students2, sex_class, count, -grade)
res <- gather(student2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
View(students)
View(students2)
submit()
student3
students3
?gather
View(students3)
submit()
submit()
submit)
submit()
?spread
submit()
extract_numeric("class5")
submit()
?mutate
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status="passed")
failed <- mutate(faled, status="failed")
failed <- mutate(failed, status="failed")
bind_rows(passed, failed)
sat
?select
select(sat,-contains("total"))
gather(sat, part_sex, count, -score_range)
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
### <Your call to separate()> %>%
separate(part_sex, c("part", "sex"))
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
### <Your call to separate()> %>%
separate(part_sex, c("part", "sex")) %>%
print
submit()
?group_by
submit()
Sys.getlocale("LC_TIME")
librar(lubridate)
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1/9/2012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 2, minutes = 43)
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hour(15) + min(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tx(arrive, tzone = "Asia/Hong_Kong")
with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008")
last_time <- mdy("June 17, 2008", tzone = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, color="blue")
boxplot(ppm, col = "blue")
abline(h=12)
hist(ppm, col = "green")
run(ppm)
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v=12, lwd=2)
abline(v=median(ppm), col = "magenta")
abline(v=median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg < table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Countries in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
?boxplot
boxplot(pm24 ~ region, data = pollution, col = "red")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution, region=="east")
head(east)
hist(east$pm25, col="green")
hist(subset(polluion, region=="west"), col = "green")
hist(subset(pollution, region=="west"), col = "green")
hist(subset(pollution, region=="west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(lwd=2, lty=2)
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, pollution$pm25, col=pollution$region)
plot(pollution$latitude, ppm, col=pollution$region)
?abline
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1,2), mar=c(5,4,2,1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="East")
library(swirl)
swirl()
head(cars)
with(cars, plot(speed, distance))
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot( Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot( Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
with(mpg, ggplot(displ, hwy, data = mpg))
with(mpg, qgplot(displ, hwy, data = mpg))
with(mpg, qplot(displ, hwy, data = mpg))
qplot(displ, hwy, data = mpg)
library(swirl)
swirl()
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, set="n")
plot(airquality$Wind, type="n",airquality$Ozone)
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, Month == "5")
may <- subset(airquality, Month == 5)
points(may$Wind, may$Ozone, col="blue", pch=4)
points(may$Wind, may$Ozone, col="blue", pch=17)
notmay <- subset(airquality, month !== 5)
notmay <- subset(airquality, !(month == 5))
notmay <- subset(airquality, month == 5)
library(datasets)
notmay <- subset(airquality, Month != 5)
?points
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend("topright", pch=c(17,8), col=c("blue", "red"), legend = ("May", "Other Months"))
legend("topright", pch=c(17,8), col=c("blue", "red"), legend = c("May", "Other Months"))
?abline
abline(h=median(airquality$Wind), lty=2, lwd=2)
abline(v=median(airquality$Wind), lty=2, lwd=2)
par(mfrow=(1,2))
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?xyplot
?points
?trellis.par.set
?print.trellis
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
qplot(votes, rating, data = movies)
?qplot
qplot(votes, rating, data = movies) + geom_smooth()
library(swirl)
swirl()
colors(10)
sample(colors(),10)
colorRamp(c("red","blue"))
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue","green",".5"))
p3 <- colorRampPalette(c("blue","green"),.5)
p3 <- colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
plot(x,y,pch=19,rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano,col=pal(20))
image(volcano,col=p1(20))
setwd("~/Rob/Coursera/Reproducable_Research/PeerAssessment1")
activity.df <- readcsv(unz("./activity.zip","activity.csv"))
activity.df <- read.csv(unz("./activity.zip","activity.csv"))
View(activity.df)
class(activity.df$date)
class(activity.df$steps)
class(activity.df$interval)
View(activity.df)
View(activity.df)
activity.df$date <- as.Date(activty.df$date)
activity.df$date <- as.Date(activity.df$date)
class(activity.df$date)
View(activity.df)
head(activity.df)
24*60
24*12
times <- as.Date(activity.df$interval, "M")
times <- as.Date(activity.df$interval, "m")
?hist
daily_steps.df <- aggregate(steps ~ date, activity.df, sum)
View(daily_steps.df)
View(daily_steps.df)
View(activity.df)
View(daily_steps.df)
?aggregate
